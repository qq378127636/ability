前言
    spring cloud 为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等。
    在Spring Cloud微服务系统中，一种常见的负载均衡方式是，客户端的请求首先经过负载均衡（zuul、Ngnix），再到达服务网关（zuul集群），然后再到具体的服务。
    服务统一注册到高可用的服务注册中心集群，服务的所有的配置文件由配置服务管理。

服务注册中心
    eureka【juˈriːkə】

服务消费者(负载均衡)
    ribbon【ribən】+rest、Feign【feɪn】
    ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。
    Feign是一个声明式的伪Http客户端，Feign 采用的是基于接口的注解；Feign集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果；整合了Hystrix，具有熔断的能力

断路器
    在微服务架构中，如果单个服务出现问题，因为服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应
    Netflix开源了Hystrix【hɪst'rɪks】组件，实现了断路器模式，断路打开后，可用避免连锁故障，fallback方法可以直接返回一个固定值。

路由网关
    Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如／api/user转发到到user服务，/api/shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能

分布式配置中心
    在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件，
    spring cloud config实现了这个功能，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中

消息总线
    Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控。

服务链路追踪
    一个接口可能需要很多个服务协同才能完成这个接口功能，如果链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂：
    Sleuth【sluːθ】主要功能就是在分布式系统中提供追踪解决方案，并且兼容支持了zipkin【zɪp kɪn】(服务追踪组件)，启动命令：java -jar zipkin-server-2.10.1-exec.jar

gateway
     Gateway是Spring Cloud官方推出的第二代网关框架，取代Zuul网关。网关作为流量的，在微服务系统中有着非常作用，网关常见的功能有路由转发、权限校验、限流控制等作用。

     predicate具有路由分发的功能，决定了一个请求走哪一个路由。Gateway内置了许多Predicate，如时间类型的AfterRoutePredicateFactory cookie类型的CookieRoutePredicateFactory；

     filter所处的工作节点，有着非常重要的作用，在predicate路由处理之前，需要经过“pre”类型的过滤器处理，处理返回响应之后，可以由“post”类型的过滤器处理：
     在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等；
     与zuul不同的是filter从作用范围可分为另外两种，一种是针对于单个路由的gateway filter，它在配置文件中的写法同predict类似；另外一种是针对于所有路由的global gateway filer


------------------
什么是springcloud？
    springcloud更好的诠释了插件式开发理念，各种组件形成的平台替代了传统的高可用部署架构和网关代理。
    这些可以让我们减少架构带来的复杂度，从而可以把更多时间关注业务开发；
    同时由于架构与业务的解耦，带来了微服务这种更加灵活的开发模式。

springcloud的核心组件有哪些，各有什么作用？
    网关(gateway/zuul)
        Zuul的主要功能是路由转发和过滤器，默认和Ribbon结合实现了负载均衡的功能；
        gateway是官方推出的第二代网关框架，取代Zuul网关。网关作为流量的，在微服务系统中有着非常作用，网关常见的功能有路由转发、权限校验、限流控制等作用。
        其中predicate具有路由分发的功能，filter用来拦截处理请求、响应。
    服务注册中心(eureka/zookeeper+Dubbo)
        Eureka和ZooKeeper都可以实现服务注册，但Eureka着重于服务的高可用性，而Zookeeper注重服务的强一致性；
        这从Zookeeper的半数存活选举机制和Eureka的自我保护机制实现就能看出来，所以特殊情况瞎Eureka可能不会查询到最新数据，而Zookeeper可能发生不可用的问题。
    负载均衡(ribbon/feign)
         ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。
         Feign是一个声明式的伪Http客户端，Feign 采用的是基于接口的注解；Feign集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果；整合了Hystrix，具有熔断的能力
    断路由(hystric)
        在微服务架构中，如果单个服务出现问题，因为服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应
        Netflix开源了Hystrix【hɪst'rɪks】组件，实现了断路器模式，断路打开后，可用避免连锁故障，fallback方法可以直接返回一个固定值。
    配置中心(config)
        在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件，
        spring cloud config实现了这个功能，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中
    消息总线(SpringCloudBus+queue)
        Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控。


微服务之间是如何独立通讯的？
    通过服务注册中心使用restApi调用

springcloud如何实现服务的注册？
    服务发布时，指定对应的服务名,将服务注册到注册中心; 注册中心使用@EnableEurekaServer，服务用@EnableDiscoveryClient； 然后通过ribbon或feign进行服务消费

什么是服务熔断？什么是服务降级？
    服务熔断指的是某个服务故障或异常条件(服务线程)被触发，直接熔断整个服务，而不是一直等到此服务超时，引起整个系统出现雪崩效应，类似显示世界中的“保险丝"；
    服务降级是从系统的稳定性和可用性出发的，当服务线熔断的时候就启动服务降级直接返回一个提前准备好的fallback错误处理, 避免雪崩效应，保证高可用性。

微服务的优缺点？
    优点：
    1、微服务使得业务粒度更细，降低了业务的耦合度，简化了整体需求的复杂度；
    2、微服务解耦了前后端的开发模式，每个服务相当于一个组件，提高了重用性；
    3、每个服务的独立部署有利于合理分配系统资源，提升性能；
    3、综合以上提高了生产力。

    缺点：
    1、微服务之间的调用会产生通信成本，特别是依赖多个服务完成业务的场景；
    2、微服务这种分布式架构同时也会带来服务间的协调问题，比如事务控制，雪崩效应；
    3、微服务的增加，服务的管理带来运维难度，并且这种增长是很容易的；

eureka自我保护机制是什么?
    当Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。

SpringCloud和Dubbo的区别
    服务的调用方式Dubbo使用的是RPC远程调用,而SpringCloud使用的是 Rest API;
    Dubbo使用了第三方的ZooKeeper作为其底层的注册中心,实现服务的注册和发现. SpringCloud使用Spring Cloud Netflix Eureka实现注册中心;
    服务网关,Dubbo并没有本身的实现,只能通过其他第三方技术的整合,而SpringCloud有Zuul路由网关,作为路由服务器,进行消费者的请求分发,SpringCloud还支持断路器等。








